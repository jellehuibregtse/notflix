version: '3'
services:
  gateway:
    build: ./api-gateway
    restart: always
    hostname: api-gateway
    env_file:
      - ./api-gateway/.env
    environment:
      MOVIE_SERVICE_HOST: movie-service
      USER_SERVICE_HOST: user-service
      FRONTEND_HOST: frontend-service
      PORT: ${PORT:-3003}
      MOVIE_SERVICE_PORT: ${MOVIE_SERVICE_PORT:-3001}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT:-3002}
      FRONTEND_PORT: ${FRONTEND_PORT:-80}
    ports:
      - "8000:3003"
    networks:
      - backend
      - frontend
    depends_on:
      - user-service
      - movie-service

  frontend-service:
    build: ./web
    restart: always
    hostname: frontend-service
    networks:
      - frontend

  user-service:
    build: ./user-service
    restart: always
    hostname: user-service
    env_file:
      - ./user-service/.env
    environment:
      DB_HOST: postgres
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-user-service}
      PORT: ${PORT:-3002}
    networks:
      - backend
    links:
      - postgres
    depends_on:
      - postgres

  movie-service:
    build: ./movie-service
    restart: always
    hostname: movie-service
    env_file:
      - ./movie-service/.env
    environment:
      DB_HOST: postgres
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-movie-service}
      PORT: ${PORT:-3001}
    networks:
      - backend
    links:
      - postgres
    depends_on:
      - postgres
      
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres: {}
